"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–π
"""

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession
import os

from db.database import async_session_maker
from db.models import Session as DBSession, Result
from services.pdf_generator import generate_pdf_report
from config import ADMIN_IDS

router = Router()


@router.message(Command("results"))
async def show_results(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏"""
    async with async_session_maker() as session:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∞–º—É—é —Å–≤–µ–∂—É—é)
        result = await session.execute(
            select(DBSession).where(
                and_(
                    (DBSession.partner1_user_id == message.from_user.id) |
                    (DBSession.partner2_user_id == message.from_user.id),
                    DBSession.status == "completed"
                )
            ).order_by(DBSession.created_at.desc()).limit(1)
        )
        db_session = result.scalar_one_or_none()

        if not db_session:
            await message.answer(
                "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.\n\n"
                "–ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /test"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = await session.execute(
            select(Result).where(Result.session_id == db_session.id)
        )
        test_result = result.scalar_one_or_none()

        if not test_result:
            await message.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
        from config import FREE_REPORT_LIMIT
        free_report = test_result.report[:FREE_REPORT_LIMIT]
        if len(test_result.report) > FREE_REPORT_LIMIT:
            free_report += "\n\n...\n\nüíé **–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏**"

        await message.answer(
            f"üìä **–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**\n\n"
            f"üíï **–ò–Ω–¥–µ–∫—Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {test_result.compatibility_score}%**\n\n"
            f"{free_report}\n\n"
            f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /premium",
            parse_mode="Markdown"
        )


@router.callback_query(F.data.startswith("premium_"))
async def show_premium_offer(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º-–≤–µ—Ä—Å–∏–∏"""
    session_id = int(callback.data.split("_")[1])

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    keyboard_buttons = [
        [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –æ—Ç—á—ë—Ç –∑–∞ 299‚ÇΩ", callback_data=f"buy_{session_id}")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if callback.from_user.id in ADMIN_IDS:
        keyboard_buttons.append(
            [InlineKeyboardButton(text="üß™ –¢–ï–°–¢: –ü–æ–ª—É—á–∏—Ç—å PDF –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data=f"test_pdf_{session_id}")]
        )

    keyboard_buttons.append(
        [InlineKeyboardButton(text="‚ùå –û—Å—Ç–∞—Ç—å—Å—è —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º", callback_data="cancel_premium")]
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(
        "üíé **–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏**\n\n"
        "–í –ø–æ–ª–Ω–æ–º –æ—Ç—á—ë—Ç–µ –≤—ã —É–∑–Ω–∞–µ—Ç–µ:\n\n"
        "üíò –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —è–∑—ã–∫–æ–≤ –ª—é–±–≤–∏\n"
        "üî• 3 –≥–ª–∞–≤–Ω—ã–µ –∑–æ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞\n"
        "üõ† –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, –∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è\n"
        "üé® –ö—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π\n"
        "üìä –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n\n"
        "**–¶–µ–Ω–∞: –≤—Å–µ–≥–æ 299 ‚ÇΩ**",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("buy_"))
async def process_payment(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π)"""
    session_id = int(callback.data.split("_")[1])

    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        result = await session.execute(
            select(Result).where(Result.session_id == session_id).limit(1)
        )
        test_result = result.scalar_one_or_none()

        if not test_result:
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞—Ö
        db_session_result = await session.execute(
            select(DBSession).where(DBSession.id == session_id).limit(1)
        )
        db_session = db_session_result.scalar_one_or_none()

        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Payments –∏–ª–∏ YooKassa
        # –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å—Ä–∞–∑—É

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
        await callback.message.edit_text(
            "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫—Ä–∞—Å–∏–≤—ã–π PDF –æ—Ç—á—ë—Ç...",
            parse_mode="Markdown"
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            partner1_name = "Partner 1"
            partner2_name = "Partner 2"

            # –ú–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ –∏–∑ Telegram (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ASCII)
            try:
                user1_info = await callback.bot.get_chat(db_session.partner1_user_id)
                if user1_info.first_name:
                    partner1_name = user1_info.first_name.encode('ascii', 'ignore').decode('ascii') or "Partner 1"
            except:
                pass

            try:
                user2_info = await callback.bot.get_chat(db_session.partner2_user_id)
                if user2_info.first_name:
                    partner2_name = user2_info.first_name.encode('ascii', 'ignore').decode('ascii') or "Partner 2"
            except:
                pass

            pdf_path = generate_pdf_report(
                compatibility_score=test_result.compatibility_score,
                report=test_result.report,
                partner1_name=partner1_name,
                partner2_name=partner2_name
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
            pdf_file = FSInputFile(pdf_path)

            # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéÅ –ü–æ–¥–ø–∏—Å–∫–∞ LoveBot+ –∑–∞ 399‚ÇΩ/–º–µ—Å", callback_data="subscription")],
                [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
                                    switch_inline_query=f"–ú—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å! –ù–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {test_result.compatibility_score}%")]
            ])

            await callback.message.answer_document(
                document=pdf_file,
                caption=(
                    f"üíé **–ü–†–ï–ú–ò–£–ú –û–¢–ß–Å–¢**\n\n"
                    f"üíï **–ò–Ω–¥–µ–∫—Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {test_result.compatibility_score}%**\n\n"
                    f"‚ú® **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!**\n\n"
                    f"üìÑ –í–∞—à –∫—Ä–∞—Å–∏–≤—ã–π PDF –æ—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –º–∏–Ω–∏-—Ç–µ—Å—Ç—ã –∏ —Å–æ–≤–µ—Ç—ã –¥–ª—è –≤–∞—à–µ–π –ø–∞—Ä—ã?\n"
                    f"–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É LoveBot+ üöÄ"
                ),
                parse_mode="Markdown",
                reply_markup=keyboard
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await callback.message.delete()

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª
            if os.path.exists(pdf_path):
                os.remove(pdf_path)

        except Exception as e:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF\n\n"
                f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç...",
                parse_mode="Markdown"
            )
            # –û—Ç—á—ë—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
            report_parts = [test_result.report[i:i+4000] for i in range(0, len(test_result.report), 4000)]
            for part in report_parts:
                await callback.message.answer(part, parse_mode="Markdown")

    await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", show_alert=True)


@router.callback_query(F.data.startswith("test_pdf_"))
async def test_pdf_generation(callback: types.CallbackQuery):
    """–¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    session_id = int(callback.data.split("_")[2])

    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        result = await session.execute(
            select(Result).where(Result.session_id == session_id).limit(1)
        )
        test_result = result.scalar_one_or_none()

        if not test_result:
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞—Ö
        db_session_result = await session.execute(
            select(DBSession).where(DBSession.id == session_id).limit(1)
        )
        db_session = db_session_result.scalar_one_or_none()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
        await callback.message.edit_text(
            "üß™ **–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú**\n\n"
            "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –æ—Ç—á—ë—Ç...",
            parse_mode="Markdown"
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ASCII)
            partner1_name = "Partner 1"
            partner2_name = "Partner 2"

            try:
                user1_info = await callback.bot.get_chat(db_session.partner1_user_id)
                if user1_info.first_name:
                    partner1_name = user1_info.first_name.encode('ascii', 'ignore').decode('ascii') or "Partner 1"
            except:
                pass

            try:
                user2_info = await callback.bot.get_chat(db_session.partner2_user_id)
                if user2_info.first_name:
                    partner2_name = user2_info.first_name.encode('ascii', 'ignore').decode('ascii') or "Partner 2"
            except:
                pass

            pdf_path = generate_pdf_report(
                compatibility_score=test_result.compatibility_score,
                report=test_result.report,
                partner1_name=partner1_name,
                partner2_name=partner2_name
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
            pdf_file = FSInputFile(pdf_path)

            await callback.message.answer_document(
                document=pdf_file,
                caption=(
                    f"üß™ **–¢–ï–°–¢–û–í–´–ô PDF –û–¢–ß–Å–¢**\n\n"
                    f"üíï **–ò–Ω–¥–µ–∫—Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {test_result.compatibility_score}%**\n\n"
                    f"üìÑ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF.\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
                ),
                parse_mode="Markdown"
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await callback.message.delete()

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª
            if os.path.exists(pdf_path):
                os.remove(pdf_path)

        except Exception as e:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode="Markdown"
            )

    await callback.answer("üß™ –¢–µ—Å—Ç–æ–≤—ã–π PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!", show_alert=True)


@router.callback_query(F.data == "cancel_premium")
async def cancel_premium(callback: types.CallbackQuery):
    """–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–º–∏—É–º-–≤–µ—Ä—Å–∏–∏"""
    await callback.message.edit_text(
        "‚úÖ –•–æ—Ä–æ—à–æ! –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–ª–Ω–æ–º—É –æ—Ç—á—ë—Ç—É –ø–æ–∑–∂–µ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /results —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "subscription")
async def show_subscription(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
        [InlineKeyboardButton(text="‚ùå –ú–æ–∂–µ—Ç –ø–æ–∑–∂–µ", callback_data="cancel_subscription")]
    ])

    await callback.message.edit_text(
        "üöÄ **LoveBot+ –ü–æ–¥–ø–∏—Å–∫–∞**\n\n"
        "–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–¥–ø–∏—Å–∫—É:\n\n"
        "üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –º–∏–Ω–∏-—Ç–µ—Å—Ç—ã\n"
        "üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∞\n"
        "üìä –¢—Ä–µ–∫–∏–Ω–≥ –¥–∏–Ω–∞–º–∏–∫–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n"
        "üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏ –¥–ª—è –ø–∞—Ä\n"
        "üí¨ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "**–¶–µ–Ω–∞: 399‚ÇΩ/–º–µ—Å—è—Ü**",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "buy_subscription")
async def buy_subscription(callback: types.CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    await callback.message.edit_text(
        "‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**\n\n"
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ LoveBot+\n\n"
        "–ü–µ—Ä–≤—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–∏–¥—ë—Ç —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π üìÖ",
        parse_mode="Markdown"
    )
    await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!", show_alert=True)


@router.callback_query(F.data == "cancel_subscription")
async def cancel_subscription(callback: types.CallbackQuery):
    """–û—Ç–∫–∞–∑ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.message.edit_text(
        "–•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è üòä",
        parse_mode="Markdown"
    )
    await callback.answer()


@router.message(Command("help"))
async def help_command(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞"""
    help_text = """
‚ù§Ô∏è **LoveBot - –ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
/test - –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
/quick_check - ‚ö°Ô∏è –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç)
/results - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
/premium - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç (–ø—Ä–µ–º–∏—É–º)
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**

üìù **–û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç:**
1. –°–æ–∑–¥–∞–π —Å–µ—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start
2. –û—Ç–ø—Ä–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä—É —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
3. –û–±–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /test
4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

‚ö°Ô∏è **–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:**
1. –ï—Å–ª–∏ —Ç—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–π /quick_check
2. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–æ–≤–æ–º—É —á–µ–ª–æ–≤–µ–∫—É
3. –û–Ω –ø—Ä–æ–π–¥—ë—Ç —Ç–µ—Å—Ç, –∞ —Ç–≤–æ–∏ —Å—Ç–∞—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –µ–≥–æ —Ç–µ—Å—Ç–∞!

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @your_support_bot
"""
    await message.answer(help_text, parse_mode="Markdown")
