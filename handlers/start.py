"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏
"""

from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession

from db.database import async_session_maker
from db.models import Session as DBSession, Answer
from services.utils import generate_join_link

router = Router()


@router.message(Command("start"))
async def start_cmd(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ deep link –ø–∞—Ä–∞–º–µ—Ç—Ä
    args = message.text.split()[1] if len(message.text.split()) > 1 else None

    if args and args.startswith("join_"):
        # –≠—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏
        await join_session_deep_link(message, args)
        return

    if args and args.startswith("quick_"):
        # –≠—Ç–æ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        await quick_check_deep_link(message, args)
        return

    # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="create_session")]
    ])

    await message.answer(
        "‚ù§Ô∏è **–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî LoveBot**\n\n"
        "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã?\n\n"
        "–ü—Ä–æ–π–¥–∏ –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤–º–µ—Å—Ç–µ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º.\n"
        "‚è± –≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã!",
        parse_mode="Markdown",
        reply_markup=keyboard
    )


@router.callback_query(F.data == "create_session")
async def create_session_callback(callback: types.CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
    async with async_session_maker() as session:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        new_session = DBSession(
            partner1_user_id=callback.from_user.id,
            status="pending"
        )
        session.add(new_session)
        await session.commit()
        await session.refresh(new_session)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
        bot_username = (await callback.bot.me()).username
        share_link = f"https://t.me/{bot_username}?start=join_{new_session.id}_partner2"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä—É",
                                url=f"https://t.me/share/url?url={share_link}&text=–ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ –º–Ω–æ–π! ‚ù§Ô∏è")],
            [InlineKeyboardButton(text="üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram",
                                switch_inline_query=f"–ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ –º–Ω–æ–π! {share_link}")]
        ])

        await callback.message.edit_text(
            "üîó **–í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞!**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –µ—ë –ø–∞—Ä—Ç–Ω—ë—Ä—É, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –≤–º–µ—Å—Ç–µ!\n\n"
            "üí° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–∫—Ä–æ—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç–µ –æ–±–∞ üòâ\n\n"
            "üìã **–°—Å—ã–ª–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:**\n"
            f"`{share_link}`\n\n"
            "üëÜ –ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

    await callback.answer()


async def join_session_deep_link(message: types.Message, args: str):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ deep link"""
    try:
        # –ü–∞—Ä—Å–∏–º: join_123_partner2
        parts = args.split("_")
        session_id = int(parts[1])
        role = parts[2]

        async with async_session_maker() as session:
            # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é
            result = await session.execute(
                select(DBSession).where(DBSession.id == session_id)
            )
            db_session = result.scalar_one_or_none()

            if not db_session:
                await message.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.")
                return

            if db_session.status != "pending":
                await message.answer("‚ùå –≠—Ç–∞ —Å–µ—Å—Å–∏—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä –µ—â—ë –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è (–∑–∞—â–∏—Ç–∞ –æ—Ç race condition)
            if db_session.partner2_user_id is not None:
                await message.answer("‚ùå –ö —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            if role == "partner2":
                db_session.partner2_user_id = message.from_user.id
                db_session.status = "in_progress"
                await session.commit()

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test")]
                ])

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
                await message.answer(
                    "‚úÖ **–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏!**\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –æ–±–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.\n"
                    "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá",
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
                if db_session.partner1_user_id:
                    try:
                        keyboard_p1 = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test")]
                        ])
                        await message.bot.send_message(
                            db_session.partner1_user_id,
                            "‚úÖ **–¢–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!**\n\n"
                            "–¢–µ–ø–µ—Ä—å –≤—ã –æ–±–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.\n"
                            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá",
                            parse_mode="Markdown",
                            reply_markup=keyboard_p1
                        )
                    except Exception:
                        pass

            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –≤ —Å—Å—ã–ª–∫–µ.")

    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")


@router.message(Command("quick_check"))
async def quick_check_command(message: types.Message):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç"""
    async with async_session_maker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        result = await session.execute(
            select(Answer).where(Answer.user_id == message.from_user.id)
            .order_by(Answer.completed_at.desc())
            .limit(1)
        )
        last_answer = result.scalar_one_or_none()

        if not last_answer:
            await message.answer(
                "‚ùå **–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤**\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /start, –∞ –ø–æ—Ç–æ–º —Å–º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–æ–≤—ã–º–∏ –ª—é–¥—å–º–∏!",
                parse_mode="Markdown"
            )
            return

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        new_session = DBSession(
            partner1_user_id=message.from_user.id,
            status="quick_check"  # —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        )
        session.add(new_session)
        await session.commit()
        await session.refresh(new_session)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
        bot_username = (await message.bot.me()).username
        share_link = f"https://t.me/{bot_username}?start=quick_{new_session.id}_{message.from_user.id}"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä—É",
                                url=f"https://t.me/share/url?url={share_link}&text=–ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å! ‚ù§Ô∏è")],
            [InlineKeyboardButton(text="üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram",
                                switch_inline_query=f"–ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å! {share_link}")]
        ])

        await message.answer(
            "‚ö°Ô∏è **–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É —á–µ–ª–æ–≤–µ–∫—É, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å!\n\n"
            "–û–Ω –ø—Ä–æ–π–¥—ë—Ç —Ç–µ—Å—Ç, –∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ä–∞–≤–Ω–∏—Ç –µ–≥–æ –æ—Ç–≤–µ—Ç—ã —Å —Ç–≤–æ–∏–º–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.\n\n"
            "üí° **–¢–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ!**\n\n"
            "üìã **–°—Å—ã–ª–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:**\n"
            f"`{share_link}`\n\n"
            "üëÜ –ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            parse_mode="Markdown",
            reply_markup=keyboard
        )


async def quick_check_deep_link(message: types.Message, args: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ deep link"""
    try:
        # –ü–∞—Ä—Å–∏–º: quick_123_456 (session_id_original_user_id)
        parts = args.split("_")
        session_id = int(parts[1])
        original_user_id = int(parts[2])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if message.from_user.id == original_user_id:
            await message.answer(
                "‚ùå **–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∞–º —Å —Å–æ–±–æ–π!** üòÑ\n\n"
                "–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.",
                parse_mode="Markdown"
            )
            return

        async with async_session_maker() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç—ã
            result = await session.execute(
                select(Answer).where(Answer.user_id == original_user_id)
                .order_by(Answer.completed_at.desc())
                .limit(1)
            )
            original_answer = result.scalar_one_or_none()

            if not original_answer:
                await message.answer(
                    "‚ùå –£ —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.\n"
                    "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç!",
                    parse_mode="Markdown"
                )
                return

            # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é
            result = await session.execute(
                select(DBSession).where(DBSession.id == session_id)
            )
            db_session = result.scalar_one_or_none()

            if not db_session:
                await message.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
            db_session.partner2_user_id = message.from_user.id
            db_session.status = "in_progress"
            await session.commit()

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")]
            ])

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            try:
                original_user = await message.bot.get_chat(original_user_id)
                original_name = original_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            except:
                original_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            await message.answer(
                f"‚ö°Ô∏è **–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å {original_name}**\n\n"
                f"–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç –∏–∑ 5 –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
                f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç—ã —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏!\n\n"
                f"üí° {original_name} —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —ç—Ç–æ—Ç —Ç–µ—Å—Ç, –ø–æ—ç—Ç–æ–º—É –µ–º—É –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∑–∞–Ω–æ–≤–æ.\n\n"
                f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá",
                parse_mode="Markdown",
                reply_markup=keyboard
            )

    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
