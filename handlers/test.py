"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
"""

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession

from db.database import async_session_maker
from db.models import Session as DBSession, Answer
from services.analyzer import analyze
from services.utils import generate_join_link
from config import FREE_REPORT_LIMIT

router = Router()

# –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
QUESTIONS = [
    "1Ô∏è‚É£ –ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?\n\nA) –ü—Ä–æ–≤–æ–¥–∏—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–º–µ—Å—Ç–µ ‚è∞\nB) –ü–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –∏ —Å—é—Ä–ø—Ä–∏–∑—ã üéÅ\nC) –°–ª—ã—à–∞—Ç—å —Å–ª–æ–≤–∞ –ª—é–±–≤–∏ –∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã üí¨\nD) –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –¥–µ–ª–∞—Ö ü§ù\nE) –§–∏–∑–∏—á–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å –∏ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è ü§ó",

    "2Ô∏è‚É£ –ö–∞–∫ —Ç—ã —á–∞—â–µ –≤—Å–µ–≥–æ –≤—ã—Ä–∞–∂–∞–µ—à—å —Å–≤–æ—é –ª—é–±–æ–≤—å?\n\nA) –ü—Ä–æ–≤–æ–∂—É –≤—Ä–µ–º—è —Å –ª—é–±–∏–º—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º\nB) –î–∞—Ä—é –ø–æ–¥–∞—Ä–∫–∏\nC) –ì–æ–≤–æ—Ä—é –ø—Ä–∏—è—Ç–Ω—ã–µ —Å–ª–æ–≤–∞\nD) –ü–æ–º–æ–≥–∞—é —Å –¥–µ–ª–∞–º–∏\nE) –û–±–Ω–∏–º–∞—é –∏ —Ü–µ–ª—É—é",

    "3Ô∏è‚É£ –ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ–±–∏–∂–∞–µ—Ç –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?\n\nA) –ö–æ–≥–¥–∞ –ø–∞—Ä—Ç–Ω—ë—Ä –Ω–µ —Ö–æ—á–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–æ –º–Ω–æ–π –≤—Ä–µ–º—è\nB) –ö–æ–≥–¥–∞ –∑–∞–±—ã–≤–∞—é—Ç –æ –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç–∞—Ö\nC) –ö–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä—è—Ç –ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–ª–æ–≤\nD) –ö–æ–≥–¥–∞ –Ω–µ –ø–æ–º–æ–≥–∞—é—Ç, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ\nE) –ö–æ–≥–¥–∞ –∏–∑–±–µ–≥–∞—é—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞",

    "4Ô∏è‚É£ –ß—Ç–æ —Ç–µ–±—è –¥–µ–ª–∞–µ—Ç —Å–∞–º—ã–º —Å—á–∞—Å—Ç–ª–∏–≤—ã–º?\n\nA) –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è\nB) –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏\nC) –ü—Ä–∏–∑–Ω–∞–Ω–∏—è –≤ –ª—é–±–≤–∏\nD) –ö–æ–≥–¥–∞ –ø–∞—Ä—Ç–Ω—ë—Ä –±–µ—Ä—ë—Ç –Ω–∞ —Å–µ–±—è —á–∞—Å—Ç—å –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π\nE) –û–±—ä—è—Ç–∏—è –∏ –ø–æ—Ü–µ–ª—É–∏",

    "5Ô∏è‚É£ –ö–∞–∫–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—á–µ—Ä –¥–ª—è —Ç–µ–±—è?\n\nA) –£–∂–∏–Ω –≤–¥–≤–æ—ë–º –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ\nB) –ü–æ–ª—É—á–∏—Ç—å –±—É–∫–µ—Ç —Ü–≤–µ—Ç–æ–≤\nC) –î–æ–ª–≥–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ –¥—É—à–∞–º\nD) –ö–æ–≥–¥–∞ –ø–∞—Ä—Ç–Ω—ë—Ä –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —É–∂–∏–Ω\nE) –û–±–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞ –¥–∏–≤–∞–Ω–µ –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å–º–æ–º"
]


class TestStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM"""
    waiting_for_answer = State()


@router.callback_query(F.data == "start_test")
async def start_test_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ callback (–∫–Ω–æ–ø–∫–∞)"""
    await start_test_logic(callback.message, callback.from_user.id, state)
    await callback.answer()


@router.message(Command("test"))
async def start_test_command(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    await start_test_logic(message, message.from_user.id, state)


async def start_test_logic(message: types.Message, user_id: int, state: FSMContext):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞"""
    async with async_session_maker() as session:
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∞–º—É—é —Å–≤–µ–∂—É—é)
        result = await session.execute(
            select(DBSession).where(
                and_(
                    (DBSession.partner1_user_id == user_id) |
                    (DBSession.partner2_user_id == user_id),
                    DBSession.status == "in_progress"
                )
            ).order_by(DBSession.created_at.desc()).limit(1)
        )
        db_session = result.scalar_one_or_none()

        if not db_session:
            await message.answer(
                "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.\n\n"
                "–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à—ë–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç
        result = await session.execute(
            select(Answer).where(
                and_(
                    Answer.session_id == db_session.id,
                    Answer.user_id == user_id
                )
            )
        )
        existing_answer = result.scalar_one_or_none()

        if existing_answer:
            await message.answer("‚úÖ –¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª —ç—Ç–æ—Ç —Ç–µ—Å—Ç. –û–∂–∏–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        role = "partner1" if db_session.partner1_user_id == user_id else "partner2"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
        await state.update_data(
            session_id=db_session.id,
            role=role,
            current_question=0,
            answers=[]
        )

        await state.set_state(TestStates.waiting_for_answer)

        # –°–æ–∑–¥–∞—ë–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="A", callback_data="answer_A")],
            [InlineKeyboardButton(text="B", callback_data="answer_B")],
            [InlineKeyboardButton(text="C", callback_data="answer_C")],
            [InlineKeyboardButton(text="D", callback_data="answer_D")],
            [InlineKeyboardButton(text="E", callback_data="answer_E")]
        ])

        await message.answer(
            "üéØ **–¢–µ—Å—Ç –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å**\n\n"
            "–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º —Ç–µ–±–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
            "–í—ã–±–∏—Ä–∞–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá\n\n" + QUESTIONS[0],
            parse_mode="Markdown",
            reply_markup=keyboard
        )


@router.callback_query(F.data.startswith("answer_"), TestStates.waiting_for_answer)
async def process_answer_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ callback"""
    answer = callback.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º A, B, C, D –∏–ª–∏ E

    data = await state.get_data()
    current_question = data["current_question"]
    answers = data["answers"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers.append(answer)
    current_question += 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã
    if current_question < len(QUESTIONS):
        await state.update_data(
            current_question=current_question,
            answers=answers
        )

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="A", callback_data="answer_A")],
            [InlineKeyboardButton(text="B", callback_data="answer_B")],
            [InlineKeyboardButton(text="C", callback_data="answer_C")],
            [InlineKeyboardButton(text="D", callback_data="answer_D")],
            [InlineKeyboardButton(text="E", callback_data="answer_E")]
        ])

        try:
            await callback.message.edit_text(
                QUESTIONS[current_question],
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                QUESTIONS[current_question],
                parse_mode="Markdown",
                reply_markup=keyboard
            )
    else:
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω - –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.answer()
        await callback.message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã...")
        await finish_test(callback.message, state, answers, user_id=callback.from_user.id)
        return

    await callback.answer()


@router.message(TestStates.waiting_for_answer)
async def process_answer_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤—Ä—É—á–Ω—É—é)"""
    data = await state.get_data()
    current_question = data["current_question"]
    answers = data["answers"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
    answer = message.text.strip().upper()
    if answer not in ["A", "B", "C", "D", "E"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –æ–¥–Ω—É –±—É–∫–≤—É: A, B, C, D –∏–ª–∏ E")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers.append(answer)
    current_question += 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã
    if current_question < len(QUESTIONS):
        await state.update_data(
            current_question=current_question,
            answers=answers
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="A", callback_data="answer_A")],
            [InlineKeyboardButton(text="B", callback_data="answer_B")],
            [InlineKeyboardButton(text="C", callback_data="answer_C")],
            [InlineKeyboardButton(text="D", callback_data="answer_D")],
            [InlineKeyboardButton(text="E", callback_data="answer_E")]
        ])

        await message.answer(QUESTIONS[current_question], reply_markup=keyboard)
    else:
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω
        await finish_test(message, state, answers)


async def finish_test(message: types.Message, state: FSMContext, answers: list, user_id: int = None):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    data = await state.get_data()
    session_id = data["session_id"]
    role = data["role"]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π user_id –∏–ª–∏ –±–µ—Ä—ë–º –∏–∑ message
    if user_id is None:
        user_id = message.from_user.id

    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        session_result = await session.execute(
            select(DBSession).where(DBSession.id == session_id)
        )
        db_session = session_result.scalar_one_or_none()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç
        is_quick_check = db_session.status in ["quick_check", "in_progress"] and db_session.partner1_user_id != user_id

        if is_quick_check:
            # –≠—Ç–æ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
            result = await session.execute(
                select(Answer).where(Answer.user_id == db_session.partner1_user_id)
                .order_by(Answer.completed_at.desc())
                .limit(1)
            )
            partner1_old_answer = result.scalar_one_or_none()

            if partner1_old_answer:
                # –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π Answer –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
                answer_partner1 = Answer(
                    session_id=session_id,
                    user_id=db_session.partner1_user_id,
                    user_role="partner1",
                    answers=partner1_old_answer.answers
                )
                session.add(answer_partner1)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ (—Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                new_answer = Answer(
                    session_id=session_id,
                    user_id=user_id,
                    user_role="partner2",
                    answers=answers
                )
                session.add(new_answer)
                await session.commit()

                await message.answer(
                    "‚úÖ **–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã.**\n\n"
                    "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å...",
                    parse_mode="Markdown"
                )

                # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await run_analysis(message, session_id, [answer_partner1, new_answer])
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.")
        else:
            # –û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –∂–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
            new_answer = Answer(
                session_id=session_id,
                user_id=user_id,
                user_role=role,
                answers=answers
            )
            session.add(new_answer)
            await session.commit()

            await message.answer(
                "‚úÖ **–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã.**\n\n"
                "–û–∂–∏–¥–∞–π, –ø–æ–∫–∞ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä –ø—Ä–æ–π–¥—ë—Ç —Ç–µ—Å—Ç.",
                parse_mode="Markdown"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∏ –ª–∏ –æ–±–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ —Ç–µ—Å—Ç
            result = await session.execute(
                select(Answer).where(Answer.session_id == session_id)
            )
            all_answers = result.scalars().all()

            if len(all_answers) == 2:
                # –û–±–∞ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                await message.answer("üîÑ –û–±–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
                await run_analysis(message, session_id, all_answers)

    await state.clear()


async def run_analysis(message: types.Message, session_id: int, all_answers: list):
    """–ó–∞–ø—É—Å–∫ AI-–∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    from db.models import Result

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
    answers1 = all_answers[0].answers
    answers2 = all_answers[1].answers
    user1_id = all_answers[0].user_id
    user2_id = all_answers[1].user_id

    # –ó–∞–ø—É—Å–∫–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑
    score, report = await analyze(answers1, answers2)

    async with async_session_maker() as session:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
        result = Result(
            session_id=session_id,
            compatibility_score=score,
            report=report
        )
        session.add(result)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
        db_session_result = await session.execute(
            select(DBSession).where(DBSession.id == session_id)
        )
        db_session = db_session_result.scalar_one()
        db_session.status = "completed"

        await session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á—ë—Ç (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        free_report = report[:FREE_REPORT_LIMIT]
        has_full_report = len(report) > FREE_REPORT_LIMIT

        if has_full_report:
            free_report += "\n\n...\n\nüíé **–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø—Ä–µ–º–∏—É–º-–≤–µ—Ä—Å–∏–∏**"

        result_message = (
            f"‚ú® **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤!** ‚ú®\n\n"
            f"üíï **–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {score}%**\n\n"
            f"{free_report}"
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è upsell
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –•–æ—á—É –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data=f"premium_{session_id}")],
            [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
                                switch_inline_query=f"–ú—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å! –ù–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}%")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–æ–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º
        sent_to = []

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–º—É –ø–∞—Ä—Ç–Ω—ë—Ä—É
        try:
            await message.bot.send_message(user1_id, result_message, parse_mode="Markdown", reply_markup=keyboard)
            sent_to.append(user1_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä—É 1 (ID: {user1_id}): {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–º—É –ø–∞—Ä—Ç–Ω—ë—Ä—É (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        if user2_id != user1_id:
            try:
                await message.bot.send_message(user2_id, result_message, parse_mode="Markdown", reply_markup=keyboard)
                sent_to.append(user2_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä—É 2 (ID: {user2_id}): {e}")

        # –ï—Å–ª–∏ –Ω–∏–∫–æ–º—É –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if not sent_to:
            await message.answer(result_message, parse_mode="Markdown", reply_markup=keyboard)
